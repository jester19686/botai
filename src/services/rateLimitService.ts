/**
 * üö´ –ü–†–û–î–í–ò–ù–£–¢–´–ô RATE LIMITING –°–ï–†–í–ò–°
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≥–∏–±–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */

interface RateLimitRule {
  maxRequests: number;
  windowMs: number;
  blockDurationMs?: number; // –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏
}

interface UserLimitInfo {
  count: number;
  resetTime: number;
  blockedUntil?: number;
  violations: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π
}

export class RateLimitService {
  private limits = new Map<string, UserLimitInfo>();
  private globalLimits = new Map<number, UserLimitInfo>();
  
  // –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
  private rules: Record<string, RateLimitRule> = {
    'text_message': { 
      maxRequests: 30, 
      windowMs: 60000, // 1 –º–∏–Ω—É—Ç–∞
      blockDurationMs: 300000 // 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    },
    'image_processing': { 
      maxRequests: 10, 
      windowMs: 300000, // 5 –º–∏–Ω—É—Ç
      blockDurationMs: 600000 // 10 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    },
    'settings_change': { 
      maxRequests: 5, 
      windowMs: 60000, // 1 –º–∏–Ω—É—Ç–∞
      blockDurationMs: 60000 // 1 –º–∏–Ω—É—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    },
    'command': { 
      maxRequests: 20, 
      windowMs: 60000 // 1 –º–∏–Ω—É—Ç–∞
    },
    'global': { 
      maxRequests: 50, 
      windowMs: 3600000, // 1 —á–∞—Å
      blockDurationMs: 1800000 // 30 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
   */
  checkLimit(userId: number, action: string = 'global'): {
    allowed: boolean;
    remaining: number;
    resetTime: number;
    blockedUntil?: number;
    reason?: string;
  } {
    const rule = this.rules[action] || this.rules.global;
    const key = `${userId}:${action}`;
    const now = Date.now();
    
    let userLimit = this.limits.get(key);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (userLimit?.blockedUntil && now < userLimit.blockedUntil) {
      return {
        allowed: false,
        remaining: 0,
        resetTime: userLimit.resetTime,
        blockedUntil: userLimit.blockedUntil,
        reason: `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${new Date(userLimit.blockedUntil).toLocaleTimeString('ru-RU')}`
      };
    }

    // –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –µ—Å–ª–∏ –æ–∫–Ω–æ –ø—Ä–æ—à–ª–æ
    if (!userLimit || now > userLimit.resetTime) {
      userLimit = {
        count: 0,
        resetTime: now + rule.windowMs,
        violations: userLimit?.violations || 0
      };
      this.limits.set(key, userLimit);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (userLimit.count >= rule.maxRequests) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      userLimit.violations++;
      
      if (rule.blockDurationMs) {
        userLimit.blockedUntil = now + rule.blockDurationMs;
      }
      
      this.limits.set(key, userLimit);
      
      return {
        allowed: false,
        remaining: 0,
        resetTime: userLimit.resetTime,
        blockedUntil: userLimit.blockedUntil,
        reason: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: ${rule.maxRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${Math.round(rule.windowMs / 1000)} —Å–µ–∫`
      };
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    userLimit.count++;
    this.limits.set(key, userLimit);

    return {
      allowed: true,
      remaining: rule.maxRequests - userLimit.count,
      resetTime: userLimit.resetTime
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserLimitInfo(userId: number): Record<string, {
    current: number;
    max: number;
    resetTime: number;
    blocked: boolean;
    violations: number;
  }> {
    const info: Record<string, any> = {};
    
    for (const [action, rule] of Object.entries(this.rules)) {
      const key = `${userId}:${action}`;
      const userLimit = this.limits.get(key);
      const now = Date.now();
      
      info[action] = {
        current: userLimit?.count || 0,
        max: rule.maxRequests,
        resetTime: userLimit?.resetTime || now + rule.windowMs,
        blocked: userLimit?.blockedUntil ? now < userLimit.blockedUntil : false,
        violations: userLimit?.violations || 0
      };
    }
    
    return info;
  }

  /**
   * –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)
   */
  resetUserLimits(userId: number, action?: string): void {
    if (action) {
      const key = `${userId}:${action}`;
      this.limits.delete(key);
    } else {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const keysToDelete = Array.from(this.limits.keys())
        .filter(key => key.startsWith(`${userId}:`));
      
      keysToDelete.forEach(key => this.limits.delete(key));
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VIP (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤)
   */
  private vipUsers = new Set<number>();
  
  addVipUser(userId: number): void {
    this.vipUsers.add(userId);
  }
  
  removeVipUser(userId: number): void {
    this.vipUsers.delete(userId);
  }
  
  isVipUser(userId: number): boolean {
    return this.vipUsers.has(userId);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ rate limiting
   */
  updateRule(action: string, rule: RateLimitRule): void {
    this.rules[action] = rule;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting
   */
  getStats(): {
    totalUsers: number;
    blockedUsers: number;
    totalViolations: number;
    activeVipUsers: number;
  } {
    const now = Date.now();
    let blockedUsers = 0;
    let totalViolations = 0;
    const uniqueUsers = new Set<string>();
    
    for (const [key, limit] of this.limits) {
      const userId = key.split(':')[0];
      uniqueUsers.add(userId);
      
      if (limit.blockedUntil && now < limit.blockedUntil) {
        blockedUsers++;
      }
      
      totalViolations += limit.violations || 0;
    }
    
    return {
      totalUsers: uniqueUsers.size,
      blockedUsers,
      totalViolations,
      activeVipUsers: this.vipUsers.size
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  cleanup(): void {
    const now = Date.now();
    const toDelete: string[] = [];
    
    for (const [key, limit] of this.limits) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
      if (now > limit.resetTime && (!limit.blockedUntil || now > limit.blockedUntil)) {
        toDelete.push(key);
      }
    }
    
    toDelete.forEach(key => this.limits.delete(key));
    
    if (toDelete.length > 0) {
      console.log(`üßπ Rate limit: –æ—á–∏—â–µ–Ω–æ ${toDelete.length} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }

  /**
   * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limit
   */
  createMiddleware(action: string = 'global') {
    return async (ctx: any, next: any) => {
      const userId = ctx.from?.id;
      if (!userId) return next();

      // VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
      if (this.isVipUser(userId)) {
        return next();
      }

      const limitResult = this.checkLimit(userId, action);
      
      if (!limitResult.allowed) {
        const waitTime = Math.ceil((limitResult.resetTime - Date.now()) / 1000);
        
        let message = `‚è≥ ${limitResult.reason}`;
        if (waitTime > 0) {
          message += `\n‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${waitTime} —Å–µ–∫—É–Ω–¥`;
        }
        if (limitResult.blockedUntil) {
          const unblockTime = new Date(limitResult.blockedUntil).toLocaleTimeString('ru-RU');
          message += `\nüö´ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ ${unblockTime}`;
        }
        
        await ctx.reply(message);
        return; // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º next()
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      ctx.rateLimit = {
        remaining: limitResult.remaining,
        resetTime: limitResult.resetTime
      };

      return next();
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const rateLimitService = new RateLimitService();

// –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(() => {
  rateLimitService.cleanup();
}, 10 * 60 * 1000);
