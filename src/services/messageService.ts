/**
 * üí¨ –°–ï–†–í–ò–° –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò
 * 
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
 */

import type { Context } from 'telegraf';
import type { Message as TelegramMessage } from 'telegraf/typings/core/types/typegram';
import { buildPaginationKeyboard } from '../utils/keyboards.js';

export interface PaginationState {
  pages: string[];
  currentIndex: number;
}

export class MessageService {
  private paginationStates = new Map<string, PaginationState>();
  private readonly MAX_PAGE_LENGTH = 3500;
  
  // –ö—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private responseCache = new Map<string, string>();
  private splitCache = new Map<string, string[]>();
  private readonly MAX_CACHE_SIZE = 100;

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
   */
  formatResponse(text: string): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.responseCache.has(text)) {
      return this.responseCache.get(text)!;
    }

    const trimmed = text.trim();
    const cleaned = this.stripDecor(trimmed);
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (this.responseCache.size < this.MAX_CACHE_SIZE) {
      this.responseCache.set(text, cleaned);
    }
    
    return cleaned;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private stripDecor(text: string): string {
    return text
      // –£–±–∏—Ä–∞–µ–º ‚ú® –∑–≤—ë–∑–¥–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
      .replace(/^‚ú®\s*/gm, '')
      // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
      .replace(/‚îÅ+/g, '')
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      .replace(/\n{3,}/g, '\n\n')
      .trim();
  }

  /**
   * –†–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  splitMessage(text: string): string[] {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.splitCache.has(text)) {
      return this.splitCache.get(text)!;
    }

    if (text.length <= this.MAX_PAGE_LENGTH) {
      const result = [text];
      if (this.splitCache.size < this.MAX_CACHE_SIZE) {
        this.splitCache.set(text, result);
      }
      return result;
    }

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ –∞–±–∑–∞—Ü–∞–º, –∑–∞—Ç–µ–º –ø–æ —Å–ª–æ–≤–∞–º
    const paragraphs = text.split('\n\n');
    const chunks: string[] = [];
    let current = '';

    for (const paragraph of paragraphs) {
      if (current.length + paragraph.length + 2 <= this.MAX_PAGE_LENGTH) {
        current += (current ? '\n\n' : '') + paragraph;
      } else {
        if (current) {
          chunks.push(current.trim());
          current = '';
        }
        
        // –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
        if (paragraph.length > this.MAX_PAGE_LENGTH) {
          const words = paragraph.split(' ');
          let wordChunk = '';
          
          for (const word of words) {
            if (wordChunk.length + word.length + 1 <= this.MAX_PAGE_LENGTH) {
              wordChunk += (wordChunk ? ' ' : '') + word;
            } else {
              if (wordChunk) chunks.push(wordChunk.trim());
              wordChunk = word;
            }
          }
          if (wordChunk) chunks.push(wordChunk.trim());
        } else {
          current = paragraph;
        }
      }
    }

    if (current) {
      chunks.push(current.trim());
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    if (this.splitCache.size < this.MAX_CACHE_SIZE) {
      this.splitCache.set(text, chunks);
    }

    return chunks;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async safeEditMessage(
    ctx: Context,
    chatId: number,
    messageId: number,
    text: string,
    extra?: any
  ): Promise<boolean> {
    try {
      await ctx.telegram.editMessageText(chatId, messageId, undefined, text, extra);
      return true;
    } catch (error) {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Telegram API
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  async sendAnswer(
    ctx: Context, 
    text: string, 
    statusMessage: TelegramMessage.TextMessage,
    getMainMenuKeyboard: () => any,
    replyWithTracking?: (ctx: Context, text: string, extra?: any) => Promise<any>
  ): Promise<void> {
    const formatted = this.formatResponse(text);
    const pages = this.splitMessage(formatted);
    const chatId = statusMessage.chat.id;
    const messageId = statusMessage.message_id;

    if (pages.length === 1) {
      const edited = await this.safeEditMessage(ctx, chatId, messageId, pages[0]);
      if (!edited) {
        console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è—é —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ');
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        try {
          await ctx.telegram.deleteMessage(chatId, messageId);
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ
        if (replyWithTracking) {
          await replyWithTracking(ctx, pages[0], {
            reply_markup: getMainMenuKeyboard().reply_markup
          });
        } else {
          await ctx.reply(pages[0], {
            reply_markup: getMainMenuKeyboard().reply_markup
          });
        }
      } else {
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ');
      }
      this.paginationStates.delete(`${chatId}:${messageId}`);
      return;
    }

    // –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
    this.paginationStates.set(`${chatId}:${messageId}`, { pages, currentIndex: 0 });
    const edited = await this.safeEditMessage(ctx, chatId, messageId, pages[0], {
      reply_markup: buildPaginationKeyboard(pages.length, 0, chatId, messageId).reply_markup
    });
    
    if (!edited) {
      console.log('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, —É–¥–∞–ª—è—é —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
      try {
        await ctx.telegram.deleteMessage(chatId, messageId);
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (replyWithTracking) {
        await replyWithTracking(ctx, pages[0], buildPaginationKeyboard(pages.length, 0, chatId, messageId));
      } else {
        await ctx.reply(pages[0], buildPaginationKeyboard(pages.length, 0, chatId, messageId));
      }
    } else {
      console.log('‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  async handlePagination(
    ctx: any,
    direction: 'prev' | 'next'
  ): Promise<void> {
    const { message } = ctx.callbackQuery;
    if (!message) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.');
      return;
    }

    const chatId = message.chat.id;
    const key = `${chatId}:${message.message_id}`;
    const state = this.paginationStates.get(key);

    if (!state) {
      await ctx.answerCbQuery('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
      return;
    }

    const nextIndex = direction === 'next' ? state.currentIndex + 1 : state.currentIndex - 1;

    if (nextIndex < 0 || nextIndex >= state.pages.length) {
      await ctx.answerCbQuery('–î–∞–ª—å–Ω–µ–π—à–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç.');
      return;
    }

    state.currentIndex = nextIndex;
    this.paginationStates.set(key, state);

    await ctx.editMessageText(state.pages[nextIndex], {
      reply_markup: buildPaginationKeyboard(state.pages.length, nextIndex, chatId, message.message_id).reply_markup
    });
    await ctx.answerCbQuery();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  getPaginationState(chatId: number, messageId: number): PaginationState | undefined {
    const key = `${chatId}:${messageId}`;
    return this.paginationStates.get(key);
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
   */
  deletePaginationState(chatId: number, messageId: number): void {
    const key = `${chatId}:${messageId}`;
    this.paginationStates.delete(key);
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞
   */
  clearChatPaginationStates(chatId: number): void {
    const keysToDelete = Array.from(this.paginationStates.keys())
      .filter(key => key.startsWith(`${chatId}:`));
    
    keysToDelete.forEach(key => this.paginationStates.delete(key));
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  getStats() {
    return {
      activePaginationStates: this.paginationStates.size,
      responseCacheSize: this.responseCache.size,
      splitCacheSize: this.splitCache.size,
      maxPageLength: this.MAX_PAGE_LENGTH
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
   */
  clearCaches(): void {
    this.responseCache.clear();
    this.splitCache.clear();
    console.log('üßπ MessageService: –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã');
  }
}
