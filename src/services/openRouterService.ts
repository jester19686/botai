/**
 * üöÄ –°–ï–†–í–ò–° –†–ê–ë–û–¢–´ –° OPENROUTER API
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å OpenRouter API
 */

import { fetch, Agent } from 'undici';
import { z } from 'zod';
import type { ChatMessage } from '../types/bot.js';

const OPENROUTER_ENDPOINT = 'https://openrouter.ai/api/v1/chat/completions';
const REQUEST_TIMEOUT_MS = 120_000;

// –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (Keep-Alive)
const httpAgent = new Agent({
  keepAliveTimeout: 30_000,
  keepAliveMaxTimeout: 60_000,
  connections: 10,
  headersTimeout: 60_000,
  bodyTimeout: 60_000,
  connectTimeout: 30_000
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ OpenRouter
const OpenRouterResponseSchema = z.object({
  choices: z
    .array(
      z.object({
        message: z.object({
          role: z.string(),
          content: z.union([
            z.string(),
            z.array(
              z.object({
                type: z.string(),
                text: z.string().optional()
              })
            )
          ])
        })
      })
    )
    .min(1, '–°–µ—Ä–≤–∏—Å OpenRouter –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç')
});

export class OpenRouterService {
  private totalRequests = 0;
  private totalErrors = 0;
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
  private readonly MAX_CONCURRENT_REQUESTS = 5;
  private currentRequests = 0;
  private requestQueue: Array<() => Promise<void>> = [];

  constructor(
    private apiKey: string
  ) {}

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ OpenRouter API
   */
  async callOpenRouter(messages: ChatMessage[], userId: number, userModel: string): Promise<string> {
    return this.executeWithConcurrencyLimit(async () => {
      let attempt = 0;
      let lastError: unknown;

      while (attempt < 3) {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), REQUEST_TIMEOUT_MS);

        try {
          this.totalRequests++;
          console.log(`üì° OpenRouter –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1} (—Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}) [–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.currentRequests}]`);
          
          const response = await fetch(OPENROUTER_ENDPOINT, {
            method: 'POST',
            signal: controller.signal,
            dispatcher: httpAgent,
            headers: {
              Authorization: `Bearer ${this.apiKey}`,
              'Content-Type': 'application/json',
              'HTTP-Referer': 'https://your-bot-domain.com',
              'X-Title': 'AI Telegram Bot'
            },
            body: JSON.stringify({
              model: userModel,
              messages,
              temperature: 0.7,
              max_tokens: 800
            })
          });

          if (!response.ok) {
            if (response.status === 429 || response.status >= 500) {
              console.warn(`‚ö†Ô∏è OpenRouter –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}, –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.`);
              throw new Error(`–°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${response.status}`);
            }
            const errorText = await response.text();
            console.error(`‚ùå OpenRouter –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
            throw new Error(`–û—à–∏–±–∫–∞ OpenRouter: ${response.status} ${errorText}`);
          }

          const data = await response.json();
          console.log('‚úÖ OpenRouter –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
          const parsed = OpenRouterResponseSchema.safeParse(data);

          if (!parsed.success) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parsed.error.message);
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç OpenRouter: ${parsed.error.message}`);
          }

          const content = this.extractContentText(parsed.data.choices[0]?.message.content).trim();
          if (!content) {
            throw new Error('OpenRouter –Ω–µ –≤–µ—Ä–Ω—É–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞.');
          }

          return content;
        } catch (error) {
          this.totalErrors++;
          lastError = error;
          attempt += 1;
          console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –æ—à–∏–±–∫–æ–π: ${(error as Error).message}`);
          if (attempt < 3) {
            const delayMs = 400 * 2 ** (attempt - 1);
            await this.delay(delayMs);
          }
        } finally {
          clearTimeout(timeout);
        }
      }

      const message = lastError instanceof Error ? lastError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter: ${message}`);
    });
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractContentText(content: unknown): string {
    if (typeof content === 'string') {
      return content;
    }
    if (Array.isArray(content)) {
      const textParts = content
        .filter((item): item is { type: string; text?: string } => typeof item === 'object' && item !== null)
        .map((item) => item.text ?? '')
        .filter(Boolean);
      return textParts.join('\n').trim();
    }
    return '';
  }

  /**
   * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async executeWithConcurrencyLimit<T>(operation: () => Promise<T>): Promise<T> {
    return new Promise((resolve, reject) => {
      const execute = async () => {
        this.currentRequests++;
        try {
          const result = await operation();
          resolve(result);
        } catch (error) {
          reject(error);
        } finally {
          this.currentRequests--;
          this.processQueue();
        }
      };

      if (this.currentRequests < this.MAX_CONCURRENT_REQUESTS) {
        execute();
      } else {
        this.requestQueue.push(execute);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private processQueue(): void {
    if (this.requestQueue.length > 0 && this.currentRequests < this.MAX_CONCURRENT_REQUESTS) {
      const nextRequest = this.requestQueue.shift();
      if (nextRequest) {
        nextRequest();
      }
    }
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ (—É—Ç–∏–ª–∏—Ç–∞)
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats() {
    return {
      totalRequests: this.totalRequests,
      totalErrors: this.totalErrors,
      currentRequests: this.currentRequests,
      queueLength: this.requestQueue.length,
      successRate: this.totalRequests > 0 
        ? Math.round(((this.totalRequests - this.totalErrors) / this.totalRequests) * 100) 
        : 100
    };
  }
}
