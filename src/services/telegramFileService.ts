/**
 * üìÅ –°–ï–†–í–ò–° –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò TELEGRAM
 * 
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ Telegram
 */

import type { Context } from 'telegraf';
import { fetch, Agent, type Response } from 'undici';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∞–≥–µ–Ω—Ç —á—Ç–æ –∏ –¥–ª—è OpenRouter
const httpAgent = new Agent({
  keepAliveTimeout: 30_000,
  keepAliveMaxTimeout: 60_000,
  connections: 10,
  headersTimeout: 60_000,
  bodyTimeout: 60_000,
  connectTimeout: 30_000
});

export class TelegramFileService {
  private stats = {
    filesProcessed: 0,
    totalSize: 0,
    errors: 0,
    averageProcessingTime: 0
  };

  /**
   * –ü–æ–ª—É—á–∏—Ç—å data URL –∏–∑ —Ñ–æ—Ç–æ Telegram
   */
  async tgFileToDataUrl(ctx: Context, fileId: string): Promise<string> {
    const startTime = Date.now();
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const link = await Promise.race([
        ctx.telegram.getFileLink(fileId),
        new Promise<never>((_, reject) => 
          setTimeout(() => reject(new Error('Telegram getFileLink timeout')), 15000)
        )
      ]);

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏ retry –ª–æ–≥–∏–∫–æ–π
        let res: Response | undefined;
        let attempts = 0;
        const maxAttempts = 3;
        
        while (attempts < maxAttempts) {
          try {
            res = await fetch(link.href, {
              signal: controller.signal,
              dispatcher: httpAgent,
              headers: {
                'User-Agent': 'TelegramBot/1.0'
              }
            });
            break; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
          } catch (fetchError) {
            attempts++;
            if (attempts >= maxAttempts) {
              throw fetchError; // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            }
            
            console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 1—Å–µ–∫...`);
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
        
        if (!res) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
        }

        clearTimeout(timeoutId);

        if (!res.ok) {
          throw new Error(`TG file fetch failed: ${res.status} ${res.statusText}`);
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
        const contentType = res.headers.get('content-type');
        let mime = 'image/jpeg'; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∏–ø
        
        if (contentType) {
          if (contentType.includes('png')) mime = 'image/png';
          else if (contentType.includes('gif')) mime = 'image/gif';
          else if (contentType.includes('webp')) mime = 'image/webp';
          else if (contentType.includes('jpeg') || contentType.includes('jpg')) mime = 'image/jpeg';
        }
        
        const arrayBuffer = await res.arrayBuffer();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5MB –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (arrayBuffer.byteLength > 5 * 1024 * 1024) {
          throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 5MB)');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä (–∏–∑–±–µ–≥–∞–µ–º –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤)
        if (arrayBuffer.byteLength < 100) {
          throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
        }

        const buf = Buffer.from(arrayBuffer);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const signature = buf.toString('hex', 0, 8).toLowerCase();
        const isValidImage = 
          signature.startsWith('ffd8ff') || // JPEG
          signature.startsWith('89504e47') || // PNG
          signature.startsWith('47494638') || // GIF
          signature.startsWith('52494646'); // WEBP (RIFF)
          
        if (!isValidImage) {
          throw new Error('–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
        }

        // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        const b64 = buf.toString('base64');
        
        // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è base64
        if (!b64 || b64.length < 100 || !/^[A-Za-z0-9+/=]+$/.test(b64)) {
          throw new Error('–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64');
        }

        const processingTime = Date.now() - startTime;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats(true, arrayBuffer.byteLength, processingTime);

        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${mime}, —Ä–∞–∑–º–µ—Ä: ${(arrayBuffer.byteLength / 1024).toFixed(1)}KB, base64 –¥–ª–∏–Ω–∞: ${b64.length}, –≤—Ä–µ–º—è: ${processingTime}ms`);
        
        return `data:${mime};base64,${b64}`;

      } catch (fetchError) {
        clearTimeout(timeoutId);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (fetchError instanceof Error) {
          if (fetchError.name === 'AbortError') {
            throw new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (>30 —Å–µ–∫)');
          }
          if (fetchError.message.includes('ENOTFOUND') || fetchError.message.includes('Connect Timeout')) {
            throw new Error('–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram');
          }
        }
        throw fetchError;
      }

    } catch (error) {
      this.updateStats(false, 0, Date.now() - startTime);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ Telegram:', error);
      throw error instanceof Error ? error : new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateStats(success: boolean, fileSize: number, processingTime: number): void {
    this.stats.filesProcessed++;
    
    if (success) {
      this.stats.totalSize += fileSize;
    } else {
      this.stats.errors++;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const totalTime = this.stats.averageProcessingTime * (this.stats.filesProcessed - 1) + processingTime;
    this.stats.averageProcessingTime = totalTime / this.stats.filesProcessed;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞
   */
  getStats() {
    return {
      ...this.stats,
      averageFileSize: this.stats.filesProcessed > 0 
        ? Math.round(this.stats.totalSize / (this.stats.filesProcessed - this.stats.errors)) 
        : 0,
      successRate: this.stats.filesProcessed > 0 
        ? Math.round(((this.stats.filesProcessed - this.stats.errors) / this.stats.filesProcessed) * 100) 
        : 100,
      totalSizeMB: Math.round(this.stats.totalSize / 1024 / 1024 * 100) / 100
    };
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats(): void {
    this.stats = {
      filesProcessed: 0,
      totalSize: 0,
      errors: 0,
      averageProcessingTime: 0
    };
  }
}
