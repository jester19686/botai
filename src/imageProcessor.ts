/**
 * üöÄ –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –ü–†–û–¶–ï–°–°–û–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –±–æ—Ç–∞
 */

import { setTimeout as delay } from 'node:timers/promises';
import pLimit from 'p-limit';

// –¢–∏–ø—ã
export interface ImageProcessingJob {
  userId: number;
  chatId: number;
  fileId: string;
  caption?: string;
  dataUrl: string;
  messageId: number;
  statusMessageId: number;
}

export interface ProcessingResult {
  success: boolean;
  result?: string;
  error?: string;
  processingTime: number;
}

export interface ImageProcessorConfig {
  maxConcurrentProcessing: number;
  requestTimeout: number;
  maxRetries: number;
}

/**
 * –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export class ImageProcessor {
  private readonly concurrencyLimit: ReturnType<typeof pLimit>;
  private readonly config: ImageProcessorConfig;
  private readonly processingJobs = new Map<string, Promise<ProcessingResult>>();
  private readonly processingStartTimes = new Map<string, number>();
  
  // –ú–µ—Ç—Ä–∏–∫–∏
  private stats = {
    totalProcessed: 0,
    totalSuccess: 0,
    totalFailed: 0,
    averageProcessingTime: 0,
    activeJobs: 0
  };

  constructor(config: Partial<ImageProcessorConfig> = {}) {
    this.config = {
      maxConcurrentProcessing: config.maxConcurrentProcessing || 3,
      requestTimeout: config.requestTimeout || 180000, // 3 –º–∏–Ω—É—Ç—ã
      maxRetries: config.maxRetries || 2
    };
    
    this.concurrencyLimit = pLimit(this.config.maxConcurrentProcessing);
    
    console.log(`üñºÔ∏è ImageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å concurrency: ${this.config.maxConcurrentProcessing}`);
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
   */
  async processImageAsync(
    job: ImageProcessingJob,
    callOpenRouter: (messages: any[], userId: number) => Promise<string>,
    buildHistory: (userId: number) => any[],
    getUserSystemPrompt: (userId: number) => string,
    appendToHistory: (userId: number, message: any) => void
  ): Promise<string> {
    
    const jobId = `${job.userId}_${job.messageId}_${Date.now()}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞
    if (this.processingJobs.has(jobId)) {
      throw new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è');
    }
    
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${jobId}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
    const processingPromise = this.concurrencyLimit(async () => {
      return await this.executeImageProcessing(
        job,
        callOpenRouter,
        buildHistory,
        getUserSystemPrompt,
        appendToHistory
      );
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    this.processingJobs.set(jobId, processingPromise);
    this.processingStartTimes.set(jobId, Date.now());
    this.stats.activeJobs++;
    
    try {
      const result = await processingPromise;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateStats(true, Date.now() - this.processingStartTimes.get(jobId)!);
      
      console.log(`‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${jobId} –∑–∞ ${result.processingTime}ms`);
      
      if (result.success && result.result) {
        return result.result;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
      
    } catch (error) {
      this.updateStats(false, Date.now() - this.processingStartTimes.get(jobId)!);
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${jobId}:`, error);
      throw error;
      
    } finally {
      // –û—á–∏—Å—Ç–∫–∞
      this.processingJobs.delete(jobId);
      this.processingStartTimes.delete(jobId);
      this.stats.activeJobs--;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  private async executeImageProcessing(
    job: ImageProcessingJob,
    callOpenRouter: (messages: any[], userId: number) => Promise<string>,
    buildHistory: (userId: number) => any[],
    getUserSystemPrompt: (userId: number) => string,
    appendToHistory: (userId: number, message: any) => void
  ): Promise<ProcessingResult> {
    
    const startTime = Date.now();
    let lastError: unknown;
    
    for (let attempt = 1; attempt <= this.config.maxRetries; attempt++) {
      try {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.config.maxRetries} –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${job.userId}`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const userBlocks = [
          { type: 'text', text: job.caption || '–û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–π –µ–≥–æ.' },
          { type: 'image_url', image_url: { url: job.dataUrl } }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–≤—Ä–µ–º–µ–Ω–Ω–æ)
        appendToHistory(job.userId, { 
          role: 'user', 
          content: '(–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) ' + (job.caption || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏') 
        });
        
        const historyArr = buildHistory(job.userId);

        // –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenRouter
        const messages = [
          { role: 'system', content: getUserSystemPrompt(job.userId) },
          ...historyArr,
          { role: 'user', content: userBlocks }
        ];

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const timeoutPromise = new Promise<never>((_, reject) => {
          setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')), this.config.requestTimeout);
        });

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        const assistantReply = await Promise.race([
          callOpenRouter(messages, job.userId),
          timeoutPromise
        ]);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        appendToHistory(job.userId, { role: 'assistant', content: assistantReply });

        const processingTime = Date.now() - startTime;
        
        return {
          success: true,
          result: assistantReply,
          processingTime
        };
        
      } catch (error) {
        lastError = error;
        const processingTime = Date.now() - startTime;
        
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞ (${processingTime}ms): ${(error as Error).message}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É
        if (attempt < this.config.maxRetries) {
          const delayMs = 1000 * Math.pow(2, attempt - 1); // Exponential backoff
          console.log(`‚è≥ –ü–∞—É–∑–∞ ${delayMs}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await delay(delayMs);
        }
      }
    }
    
    const processingTime = Date.now() - startTime;
    const errorMessage = lastError instanceof Error ? lastError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    return {
      success: false,
      error: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${this.config.maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${errorMessage}`,
      processingTime
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  isProcessingForUser(userId: number): boolean {
    for (const [jobId] of this.processingJobs) {
      if (jobId.startsWith(`${userId}_`)) {
        return true;
      }
    }
    return false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getActiveJobsForUser(userId: number): number {
    let count = 0;
    for (const [jobId] of this.processingJobs) {
      if (jobId.startsWith(`${userId}_`)) {
        count++;
      }
    }
    return count;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private updateStats(success: boolean, processingTime: number): void {
    this.stats.totalProcessed++;
    
    if (success) {
      this.stats.totalSuccess++;
    } else {
      this.stats.totalFailed++;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const totalTime = this.stats.averageProcessingTime * (this.stats.totalProcessed - 1) + processingTime;
    this.stats.averageProcessingTime = totalTime / this.stats.totalProcessed;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  getStats() {
    return {
      ...this.stats,
      config: this.config,
      activeJobs: this.processingJobs.size,
      successRate: this.stats.totalProcessed > 0 
        ? Math.round((this.stats.totalSuccess / this.stats.totalProcessed) * 100) 
        : 0
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
   */
  async clearStaleJobs(maxAge: number = 300000): Promise<number> {
    const now = Date.now();
    let clearedCount = 0;
    
    for (const [jobId, startTime] of this.processingStartTimes) {
      if (now - startTime > maxAge) {
        console.warn(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏: ${jobId} (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round((now - startTime) / 1000)}—Å)`);
        
        this.processingJobs.delete(jobId);
        this.processingStartTimes.delete(jobId);
        this.stats.activeJobs = Math.max(0, this.stats.activeJobs - 1);
        clearedCount++;
      }
    }
    
    if (clearedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${clearedCount} –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á`);
    }
    
    return clearedCount;
  }

  /**
   * Health check –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
   */
  async healthCheck() {
    const stats = this.getStats();
    
    return {
      status: stats.activeJobs < this.config.maxConcurrentProcessing ? 'healthy' : 'busy',
      activeJobs: stats.activeJobs,
      maxConcurrency: this.config.maxConcurrentProcessing,
      totalProcessed: stats.totalProcessed,
      successRate: stats.successRate,
      averageProcessingTime: Math.round(stats.averageProcessingTime),
      timestamp: new Date().toISOString()
    };
  }

  /**
   * Graceful shutdown
   */
  async shutdown(): Promise<void> {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é ImageProcessor...');
    
    if (this.processingJobs.size > 0) {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ${this.processingJobs.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...`);
      
      try {
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        await Promise.race([
          Promise.allSettled(Array.from(this.processingJobs.values())),
          delay(30000)
        ]);
      } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏ shutdown');
      }
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.processingJobs.clear();
    this.processingStartTimes.clear();
    this.stats.activeJobs = 0;
    
    console.log('‚úÖ ImageProcessor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const imageProcessor = new ImageProcessor({
  maxConcurrentProcessing: 3,
  requestTimeout: 180000,
  maxRetries: 2
});
