/**
 * üöÄ –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
 * 
 * –ó–∞–º–µ–Ω–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
 */

import type { Context } from 'telegraf';
import type { Message as TelegramMessage } from 'telegraf/typings/core/types/typegram';
import { imageProcessor, type ImageProcessingJob } from './imageProcessor.js';

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export function createNonBlockingImageHandler(dependencies: {
  doesUserModelSupportImages: (userId: number) => boolean;
  AVAILABLE_MODELS: readonly any[];
  getUserModel: (userId: number) => string;
  replyWithTracking: (ctx: Context, text: string, extra?: any) => Promise<TelegramMessage>;
  trackUserMessage: (userId: number, messageId: number) => void;
  isUserRequestActive: (userId: number) => boolean;
  checkUserRateLimit: (userId: number) => boolean;
  USER_RATE_LIMIT_MS: number;
  userLastRequest: Map<number, number>;
  tgFileToDataUrl: (ctx: Context, fileId: string) => Promise<string>;
  callOpenRouter: (messages: any[], userId: number) => Promise<string>;
  buildHistory: (userId: number) => any[];
  getUserSystemPrompt: (userId: number) => string;
  appendToHistory: (userId: number, message: any) => void;
  sendAnswer: (ctx: Context, answer: string, statusMessage: TelegramMessage.TextMessage) => Promise<void>;
  getMainMenuKeyboard: () => any;
  userActiveRequests: Map<number, boolean>;
}) {

  return async (ctx: Context) => {
    const userId = ctx.from!.id;
    let statusMessage: TelegramMessage.TextMessage | undefined;

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    dependencies.trackUserMessage(userId, ctx.message!.message_id);

    try {
      // 1. –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –ü–†–û–í–ï–†–ö–ò (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (!dependencies.doesUserModelSupportImages(userId)) {
        const currentModel = dependencies.AVAILABLE_MODELS.find(m => m.id === dependencies.getUserModel(userId));
        
        try {
          await ctx.deleteMessage();
        } catch (error) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:', (error as Error).message);
        }
        
        await dependencies.replyWithTracking(ctx, 
          `‚ùå –ú–æ–¥–µ–ª—å ${currentModel?.name || '—Ç–µ–∫—É—â–∞—è'} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\nüí° –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ Grok 4 Fast –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.`, 
          { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      if (!dependencies.checkUserRateLimit(userId)) {
        const waitTime = Math.ceil((dependencies.USER_RATE_LIMIT_MS - (Date.now() - (dependencies.userLastRequest.get(userId) || 0))) / 1000);
        
        await dependencies.replyWithTracking(ctx, 
          `‚è≥ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${waitTime} —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.`, 
          { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¢–ï–ö–°–¢ –ò–õ–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï)
      if (dependencies.isUserRequestActive(userId) || imageProcessor.isProcessingForUser(userId)) {
        console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} - –∞–∫—Ç–∏–≤–µ–Ω –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å`);
        
        try {
          await ctx.deleteMessage();
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);
        }
        
        const warningMessage = await dependencies.replyWithTracking(ctx, 
          `‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.`, 
          { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
        );
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
          try {
            await ctx.telegram.deleteMessage(ctx.chat!.id, warningMessage.message_id);
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          }
        }, 10000);
        
        return;
      }

      // 2. –ú–ì–ù–û–í–ï–ù–ù–´–ô –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
      console.log(`üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –Ω–∞—á–∏–Ω–∞—é –ù–ï–ë–õ–û–ö–ò–†–£–Æ–©–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É...`);
      
      statusMessage = await dependencies.replyWithTracking(
        ctx,
        'üñºÔ∏è –ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤ —Ñ–æ–Ω–µ...\n‚ö° –ë–æ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥',
        { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
      ) as TelegramMessage.TextMessage;

      // 3. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• (–±—ã—Å—Ç—Ä–æ, –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
      const photos = (ctx.message as any).photo || [];
      const largest = photos[photos.length - 1];
      const caption = ((ctx.message as any).caption || '').trim();

      // –ü–æ–ª—É—á–∞–µ–º data URL (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      const dataUrl = await dependencies.tgFileToDataUrl(ctx, largest.file_id);

      // 4. –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
      const job: ImageProcessingJob = {
        userId,
        chatId: ctx.chat!.id,
        fileId: largest.file_id,
        caption,
        dataUrl,
        messageId: ctx.message!.message_id,
        statusMessageId: statusMessage.message_id
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      imageProcessor.processImageAsync(
        job,
        dependencies.callOpenRouter,
        dependencies.buildHistory,
        dependencies.getUserSystemPrompt,
        dependencies.appendToHistory
      ).then(async (assistantReply) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        console.log(`‚úÖ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        try {
          if (statusMessage) {
            await dependencies.sendAnswer(ctx, assistantReply, statusMessage);
          } else {
            // Fallback –µ—Å–ª–∏ statusMessage –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            await dependencies.replyWithTracking(ctx, assistantReply, {
              reply_markup: dependencies.getMainMenuKeyboard().reply_markup
            });
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error);
          
          try {
            if (statusMessage) {
              await ctx.telegram.editMessageText(
                ctx.chat!.id,
                statusMessage.message_id,
                undefined,
                '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
              );
            } else {
              await dependencies.replyWithTracking(ctx, 
                '‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
              );
            }
          } catch (editError) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', editError);
          }
        }
        
      }).catch(async (error) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
        console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let userMessage = '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
        
        if (error instanceof Error) {
          if (error.message.includes('—Ç–∞–π–º–∞—É—Ç') || error.message.includes('timeout')) {
            userMessage = '‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.';
          } else if (error.message.includes('—Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º') || error.message.includes('Connect Timeout')) {
            userMessage = 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
          } else if (error.message.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')) {
            userMessage = 'üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.';
          } else if (error.message.includes('401') || error.message.includes('Unauthorized')) {
            userMessage = 'üîë –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
          } else if (error.message.includes('429') || error.message.includes('rate limit')) {
            userMessage = 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.';
          } else if (error.message.includes('base64') || error.message.includes('–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è')) {
            userMessage = 'üîß –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç (PNG, JPEG).';
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
        try {
          if (statusMessage) {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
              await ctx.telegram.editMessageText(
                ctx.chat!.id,
                statusMessage.message_id,
                undefined,
                `${userMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
              );
            } catch (editError) {
              console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–¥–∞–ª—è—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ');
              
              // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              try {
                await ctx.telegram.deleteMessage(ctx.chat!.id, statusMessage.message_id);
              } catch (deleteError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              await dependencies.replyWithTracking(ctx, 
                `${userMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
                { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
              );
            }
          } else {
            await dependencies.replyWithTracking(ctx, 
              `${userMessage}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
              { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
            );
          }
        } catch (generalError) {
          console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', generalError);
        }
      });

      // 5. –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–û–ó–í–†–ê–©–ï–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø
      // –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
      // –ë–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ
      
      console.log(`üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ`);
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = error instanceof Error 
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}` 
        : '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
      
      try {
        if (statusMessage) {
          await ctx.telegram.editMessageText(
            ctx.chat!.id,
            statusMessage.message_id,
            undefined,
            errorMessage,
            { reply_markup: dependencies.getMainMenuKeyboard().reply_markup }
          );
        } else {
          await dependencies.replyWithTracking(ctx, errorMessage, {
            reply_markup: dependencies.getMainMenuKeyboard().reply_markup
          });
        }
      } catch (replyError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
      }
    }
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export function getImageProcessorStats() {
  return imageProcessor.getStats();
}

/**
 * Health check –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export async function getImageProcessorHealth() {
  return await imageProcessor.healthCheck();
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á
 */
export async function clearStaleImageJobs() {
  return await imageProcessor.clearStaleJobs();
}

/**
 * Shutdown –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export async function shutdownImageProcessor() {
  return await imageProcessor.shutdown();
}
