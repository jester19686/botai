/**
 * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
 * 
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
 */

import type { Context } from 'telegraf';
import { UserService } from '../services/userService.js';
import { rateLimitService } from '../services/rateLimitService.js';
import { 
  getMainMenuKeyboard, 
  getWelcomeButtons, 
  getConfirmationButtons,
  getSettingsButtons,
  getAdminButtons 
} from '../utils/keyboards.js';

// –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
const ADMIN_USER_IDS = new Set<number>([
  // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–æ–≤
  // 123456789
]);

export class CommandHandlers {
  constructor(
    private userService: UserService,
    private replyWithTracking: (ctx: Context, text: string, extra?: any) => Promise<any>
  ) {}

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /start
   */
  async handleStart(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    const userFirstName = ctx.from?.first_name ?? '–¥—Ä—É–≥';
    
    await this.replyWithTracking(
      ctx,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${userFirstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º!`,
      { reply_markup: getMainMenuKeyboard().reply_markup }
    );

    await this.replyWithTracking(
      ctx,
      'üöÄ –ì–æ—Ç–æ–≤—ã —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å? –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏, –∏–¥–µ—è–º–∏ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.',
      getWelcomeButtons()
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    await this.replyWithTracking(
      ctx,
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:',
      { reply_markup: getMainMenuKeyboard().reply_markup }
    );
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /reset
   */
  async handleReset(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    await this.replyWithTracking(
      ctx, 
      'üîÑ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞?', 
      getConfirmationButtons(userId)
    );
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /settings
   */
  async handleSettings(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    await this.replyWithTracking(
      ctx, 
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 
      getSettingsButtons(userId)
    );
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /help
   */
  async handleHelp(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    const helpText = [
      '‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞*',
      '',
      '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ù–æ–≤—ã–π —á–∞—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–µ–∂–∏–π –¥–∏–∞–ª–æ–≥.',
      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é¬ª, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.',
      '‚Ä¢ –í ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –º–æ–∂–Ω–æ:',
      '  - üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å AI (Grok 4 Fast, DeepSeek Chat)',
      '  - üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
      '',
      'üì∏ *–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*',
      '‚Ä¢ Grok 4 Fast –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      '‚Ä¢ DeepSeek Chat —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º',
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      '',
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!'
    ].join('\n');

    await this.replyWithTracking(ctx, helpText, {
      parse_mode: 'Markdown',
      reply_markup: getMainMenuKeyboard().reply_markup
    });
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /debug
   */
  async handleDebug(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    const userStats = this.userService.getUserStats(userId);
    const limitInfo = rateLimitService.getUserLimitInfo(userId);
    
    const debugInfo = [
      'üîç *–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*',
      '',
      `‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}`,
      `‚Ä¢ –ú–æ–¥–µ–ª—å: ${userStats.model}`,
      `‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userStats.totalMessages}`,
      `‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è: ${userStats.historyLength} —Å–æ–æ–±—â–µ–Ω–∏–π`,
      `‚Ä¢ VIP —Å—Ç–∞—Ç—É—Å: ${rateLimitService.isVipUser(userId) ? '‚úÖ' : '‚ùå'}`,
      '',
      '‚è±Ô∏è *Rate Limits:*',
      `‚Ä¢ –¢–µ–∫—Å—Ç: ${limitInfo.text_message?.current || 0}/${limitInfo.text_message?.max || 0}`,
      `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${limitInfo.image_processing?.current || 0}/${limitInfo.image_processing?.max || 0}`,
      `‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: ${limitInfo.command?.current || 0}/${limitInfo.command?.max || 0}`,
      '',
      'üí° *–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:*',
      '‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
      '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (<5MB)',
      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JPEG, PNG —Ñ–æ—Ä–º–∞—Ç—ã'
    ].join('\n');
    
    await this.replyWithTracking(ctx, debugInfo, {
      parse_mode: 'Markdown',
      reply_markup: getMainMenuKeyboard().reply_markup
    });
  }

  /**
   * –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleStats(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    const userStats = this.userService.getUserStats(userId);
    const limitInfo = rateLimitService.getUserLimitInfo(userId);
    
    const statsText = [
      'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*',
      '',
      `üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userStats.totalMessages}`,
      `ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: ${userStats.botMessages}`,
      `üí≠ –í –∏—Å—Ç–æ—Ä–∏–∏: ${userStats.historyLength} —Å–æ–æ–±—â–µ–Ω–∏–π`,
      `üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${userStats.model}`,
      `‚≠ê VIP —Å—Ç–∞—Ç—É—Å: ${rateLimitService.isVipUser(userId) ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`,
      '',
      '‚è±Ô∏è *–õ–∏–º–∏—Ç—ã (—Ç–µ–∫—É—â–∏–π/–º–∞–∫—Å–∏–º—É–º):*',
      `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ${limitInfo.text_message?.current || 0}/${limitInfo.text_message?.max || 0}`,
      `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${limitInfo.image_processing?.current || 0}/${limitInfo.image_processing?.max || 0}`,
      `‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: ${limitInfo.command?.current || 0}/${limitInfo.command?.max || 0}`
    ].join('\n');
    
    await this.replyWithTracking(ctx, statsText, {
      parse_mode: 'Markdown',
      reply_markup: getMainMenuKeyboard().reply_markup
    });
  }

  /**
   * –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
   */
  async handleAdmin(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if (!ADMIN_USER_IDS.has(userId)) {
      await this.replyWithTracking(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    await this.replyWithTracking(
      ctx,
      'üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
      getAdminButtons(userId)
    );
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VIP
   */
  async handleAddVip(ctx: Context, targetUserId: string): Promise<void> {
    const userId = ctx.from!.id;
    
    if (!ADMIN_USER_IDS.has(userId)) {
      await this.replyWithTracking(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    const targetId = parseInt(targetUserId);
    rateLimitService.addVipUser(targetId);
    
    await this.replyWithTracking(
      ctx,
      `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ VIP`
    );
  }

  /**
   * –£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ VIP
   */
  async handleRemoveVip(ctx: Context, targetUserId: string): Promise<void> {
    const userId = ctx.from!.id;
    
    if (!ADMIN_USER_IDS.has(userId)) {
      await this.replyWithTracking(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    const targetId = parseInt(targetUserId);
    rateLimitService.removeVipUser(targetId);
    
    await this.replyWithTracking(
      ctx,
      `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetId} —É–¥–∞–ª–µ–Ω –∏–∑ VIP`
    );
  }

  /**
   * –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleResetLimits(ctx: Context, targetUserId: string): Promise<void> {
    const userId = ctx.from!.id;
    
    if (!ADMIN_USER_IDS.has(userId)) {
      await this.replyWithTracking(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    const targetId = parseInt(targetUserId);
    rateLimitService.resetUserLimits(targetId);
    
    await this.replyWithTracking(
      ctx,
      `üîì –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId} —Å–±—Ä–æ—à–µ–Ω—ã`
    );
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
   */
  async handleBotStats(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    if (!ADMIN_USER_IDS.has(userId)) {
      await this.replyWithTracking(ctx, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    const globalStats = this.userService.getGlobalStats();
    const rateLimitStats = rateLimitService.getStats();
    
    const statsText = [
      'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*',
      '',
      'üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*',
      `‚Ä¢ –í—Å–µ–≥–æ: ${globalStats.totalUsers}`,
      `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${globalStats.activeUsers}`,
      `‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: ${rateLimitStats.blockedUsers}`,
      `‚Ä¢ VIP: ${rateLimitStats.activeVipUsers}`,
      '',
      'üí¨ *–°–æ–æ–±—â–µ–Ω–∏—è:*',
      `‚Ä¢ –í—Å–µ–≥–æ: ${globalStats.totalMessages}`,
      `‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤: ${rateLimitStats.totalViolations}`,
      '',
      'üíæ *–°–∏—Å—Ç–µ–º–∞:*',
      `‚Ä¢ –ü–∞–º—è—Ç—å: ${globalStats.memoryUsage}`,
      `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.round(process.uptime() / 60)} –º–∏–Ω`
    ].join('\n');
    
    await this.replyWithTracking(ctx, statsText, {
      parse_mode: 'Markdown'
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
   */
  isAdmin(userId: number): boolean {
    return ADMIN_USER_IDS.has(userId);
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
   */
  addAdmin(userId: number): void {
    ADMIN_USER_IDS.add(userId);
  }

  /**
   * –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞
   */
  removeAdmin(userId: number): void {
    ADMIN_USER_IDS.delete(userId);
  }
}
