/**
 * ‚å®Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–û–í–´–• –ö–ù–û–ü–û–ö
 * 
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */

import type { Context } from 'telegraf';
import { UserService } from '../services/userService.js';
import { getMainMenuKeyboard, getConfirmationButtons } from '../utils/keyboards.js';

export class KeyboardHandlers {
  constructor(
    private userService: UserService,
    private replyWithTracking: (ctx: Context, text: string, extra?: any) => Promise<any>,
    private clearAllChatMessages: (ctx: Context, userId: number, excludeMessageIds?: number[]) => Promise<void>,
    private sendHelpMessage: (ctx: Context) => Promise<void>
  ) {}

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üí¨ –ù–æ–≤—ã–π —á–∞—Ç"
   */
  async handleNewChat(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await this.replyWithTracking(
      ctx,
      'üîÑ –û—á–∏—â–∞—é –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥...',
      { reply_markup: getMainMenuKeyboard().reply_markup }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const finalMessage = await this.replyWithTracking(
      ctx,
      'üÜï –ì–æ—Ç–æ–≤–æ! –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.',
      { reply_markup: getMainMenuKeyboard().reply_markup }
    );
    
    // –ü–æ—Ç–æ–º –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏—é (–∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await this.clearAllChatMessages(ctx, userId, [finalMessage.message_id]);
    this.userService.resetHistory(userId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"
   */
  async handleResetHistory(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    await this.replyWithTracking(
      ctx, 
      'üîÑ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞?', 
      getConfirmationButtons(userId)
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
   */
  async handleHelp(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    await this.sendHelpMessage(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
   */
  async handleSettings(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    const { getSettingsButtons } = await import('../utils/keyboards.js');
    
    await this.replyWithTracking(
      ctx, 
      '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', 
      getSettingsButtons(userId)
    );
  }

  /**
   * –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
   */
  async handleKeyboardButton(ctx: Context): Promise<void> {
    const text = (ctx.message as any)?.text;
    
    if (!text) return;

    switch (text) {
      case 'üí¨ –ù–æ–≤—ã–π —á–∞—Ç':
        await this.handleNewChat(ctx);
        break;
        
      case 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é':
        await this.handleResetHistory(ctx);
        break;
        
      case '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await this.handleHelp(ctx);
        break;
        
      case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await this.handleSettings(ctx);
        break;
        
      default:
        // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return;
    }
  }
}
