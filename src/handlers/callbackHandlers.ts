/**
 * üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK –ö–ù–û–ü–û–ö
 * 
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
 */

import type { Context } from 'telegraf';
import type { CallbackQuery } from 'telegraf/typings/core/types/typegram';
import { UserService } from '../services/userService.js';
import { MessageService } from '../services/messageService.js';
import { 
  getSettingsButtons, 
  getModelSelectionButtons, 
  getPromptSettingsButtons 
} from '../utils/keyboards.js';
import { AVAILABLE_MODELS } from '../types/bot.js';

export class CallbackHandlers {
  constructor(
    private userService: UserService,
    private messageService: MessageService,
    private replyWithTracking: (ctx: Context, text: string, extra?: any) => Promise<any>,
    private clearAllChatMessages: (ctx: Context, userId: number, excludeMessageIds?: number[]) => Promise<void>,
    private defaultSystemPrompt: string,
    private setUserState?: (userId: number, state: string) => void,
    private clearUserState?: (userId: number) => void
  ) {}

  /**
   * Welcome callbacks
   */
  async handleWelcomeStart(ctx: any): Promise<void> {
    await ctx.answerCbQuery('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!');
    await ctx.editMessageText('üöÄ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É.');
  }

  async handleWelcomeHelp(ctx: any): Promise<void> {
    await ctx.answerCbQuery();
    await ctx.editMessageText(
      '‚ùì *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç*\n\n' +
        '1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±—É.\n' +
        '2. –Ø –æ–±—Ä–∞—â–∞—é—Å—å –∫ –º–æ–¥–µ–ª–∏ OpenRouter.\n' +
        '3. –í–æ–∑–≤—Ä–∞—â–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.',
      { parse_mode: 'Markdown' }
    );
  }

  async handleWelcomeSettings(ctx: any): Promise<void> {
    await ctx.answerCbQuery();
    if (!ctx.from) return;
    
    await ctx.editMessageText('‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...', getSettingsButtons(ctx.from.id));
  }

  /**
   * Settings callbacks
   */
  async handleSettingsModel(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    const currentModel = this.userService.getUserModel(userId);
    const modelName = AVAILABLE_MODELS.find(m => m.id === currentModel)?.name || currentModel;
    
    await ctx.editMessageText(
      `üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${modelName}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:`, 
      getModelSelectionButtons(userId, currentModel)
    );
  }

  async handleSelectModel(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    const modelId = ctx.match[2];
    
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    const validModel = AVAILABLE_MODELS.find(m => m.id === modelId);
    if (!validModel) {
      await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å');
      return;
    }
    
    this.userService.setUserModel(userId, modelId);
    const imageSupport = validModel.supportsImages ? '\nüì∏ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!' : '\nüìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
    
    await ctx.answerCbQuery(`‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${validModel.name}`);
    await ctx.editMessageText(
      `üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${validModel.name}${imageSupport}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:`, 
      getModelSelectionButtons(userId, modelId)
    );
  }

  async handleSettingsPrompt(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    const userPrompt = this.userService.getUserSystemPrompt(userId);
    
    await ctx.editMessageText(
      `üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n${userPrompt}\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç.`, 
      getPromptSettingsButtons(userId)
    );
  }

  async handleEditPrompt(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if (this.setUserState) {
      this.setUserState(userId, 'awaiting_prompt');
    }
    
    const { Markup } = await import('telegraf');
    await ctx.editMessageText(
      '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n' +
      '–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ —Å–µ–±—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. ' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫", "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É" –∏ —Ç.–¥.\n\n' +
      'üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.',
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `settings:canceledit:${userId}`)]])
    );
  }

  async handleResetPrompt(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    this.userService.setUserSystemPrompt(userId, this.defaultSystemPrompt);
    await ctx.answerCbQuery('‚úÖ –ü—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    
    await ctx.editMessageText(
      `üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n${this.defaultSystemPrompt}\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç.`, 
      getPromptSettingsButtons(userId)
    );
  }

  async handleCancelEdit(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if (this.clearUserState) {
      this.clearUserState(userId);
    }
    
    await ctx.answerCbQuery('‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    const userPrompt = this.userService.getUserSystemPrompt(userId);
    
    await ctx.editMessageText(
      `üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n\n${userPrompt}\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç.`, 
      getPromptSettingsButtons(userId)
    );
  }

  async handleSettingsBack(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    await ctx.editMessageText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', getSettingsButtons(userId));
  }

  async handleSettingsClose(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    await ctx.editMessageText('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è!');
  }

  async handleUserStatsFromSettings(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery();
    
    const userStats = this.userService.getUserStats(userId);
    const { rateLimitService } = await import('../services/rateLimitService.js');
    const limitInfo = rateLimitService.getUserLimitInfo(userId);
    
    const statsText = [
      'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*',
      '',
      `üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userStats.totalMessages}`,
      `ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: ${userStats.botMessages}`,
      `üí≠ –í –∏—Å—Ç–æ—Ä–∏–∏: ${userStats.historyLength} —Å–æ–æ–±—â–µ–Ω–∏–π`,
      `üß† –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${userStats.model}`,
      `‚≠ê VIP —Å—Ç–∞—Ç—É—Å: ${rateLimitService.isVipUser(userId) ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`,
      '',
      '‚è±Ô∏è *–õ–∏–º–∏—Ç—ã (—Ç–µ–∫—É—â–∏–π/–º–∞–∫—Å–∏–º—É–º):*',
      `‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è: ${limitInfo.text_message?.current || 0}/${limitInfo.text_message?.max || 0}`,
      `‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${limitInfo.image_processing?.current || 0}/${limitInfo.image_processing?.max || 0}`,
      `‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: ${limitInfo.command?.current || 0}/${limitInfo.command?.max || 0}`
    ].join('\n');
    
    await ctx.editMessageText(statsText, {
      parse_mode: 'Markdown',
      reply_markup: getSettingsButtons(userId).reply_markup
    });
  }

  /**
   * Reset callbacks
   */
  async handleResetConfirm(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.answerCbQuery('–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.');
    
    // –°–ù–ê–ß–ê–õ–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const { getMainMenuKeyboard } = await import('../utils/keyboards.js');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageText('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!');
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ');
      await this.replyWithTracking(ctx, '‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!', {
        reply_markup: getMainMenuKeyboard().reply_markup
      });
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const finalMessage = await this.replyWithTracking(ctx, 'üÜï –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É –¥–∏–∞–ª–æ–≥—É! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.', {
      reply_markup: getMainMenuKeyboard().reply_markup
    });
    
    // –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ)
    await this.clearAllChatMessages(ctx, userId, [finalMessage.message_id]);
    this.userService.resetHistory(userId);
  }

  async handleResetCancel(ctx: any): Promise<void> {
    const userId = Number(ctx.match[1]);
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
      return;
    }
    
    await ctx.editMessageText('–û—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
    await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
  }

  /**
   * Pagination callbacks
   */
  async handlePagination(ctx: any, direction: 'prev' | 'next'): Promise<void> {
    await this.messageService.handlePagination(ctx, direction);
  }

  /**
   * Noop callback
   */
  async handleNoop(ctx: any): Promise<void> {
    await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
   */
  validatePrompt(text: string): { valid: boolean; error?: string } {
    if (text.length < 5) {
      return { valid: false, error: '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.' };
    }
    
    if (text.length > 1000) {
      return { valid: false, error: '–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.' };
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–æ–º–ø—Ç–µ
    const dangerousPatterns = [
      /ignore\s+(?:all\s+)?(?:previous\s+)?(?:instructions?|prompts?)/i,
      /forget\s+(?:everything|all)/i,
      /you\s+are\s+(?:no\s+longer|not)/i,
      /disregard\s+(?:the\s+)?(?:above|previous)/i
    ];
    
    if (dangerousPatterns.some(pattern => pattern.test(text))) {
      return { 
        valid: false, 
        error: '–ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.' 
      };
    }

    return { valid: true };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
   */
  async handlePromptInput(ctx: Context, userId: number, text: string): Promise<boolean> {
    const validation = this.validatePrompt(text);
    
    if (!validation.valid) {
      const { getMainMenuKeyboard } = await import('../utils/keyboards.js');
      await this.replyWithTracking(ctx, `‚ùå ${validation.error}\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.`, {
        reply_markup: getMainMenuKeyboard().reply_markup
      });
      return false;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    this.userService.setUserSystemPrompt(userId, text);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    const displayText = text.length > 150 ? text.slice(0, 147) + '...' : text;
    
    const { getMainMenuKeyboard } = await import('../utils/keyboards.js');
    await this.replyWithTracking(ctx, `‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\nüìù –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n${displayText}`, {
      reply_markup: getMainMenuKeyboard().reply_markup
    });
    
    return true;
  }
}
