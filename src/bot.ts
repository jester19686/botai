/**
 * ü§ñ –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ë–û–¢–ê (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì)
 * 
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
 */

import { config as loadEnv } from 'dotenv';
import { Telegraf, type Context, type MiddlewareFn } from 'telegraf';
import { z } from 'zod';

// –°–µ—Ä–≤–∏—Å—ã
import { UserService } from './services/userService.js';
import { rateLimitService } from './services/rateLimitService.js';
import { OpenRouterService } from './services/openRouterService.js';
import { MessageService } from './services/messageService.js';
import { TelegramFileService } from './services/telegramFileService.js';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
import { CommandHandlers } from './handlers/commandHandlers.js';
import { KeyboardHandlers } from './handlers/keyboardHandlers.js';
import { CallbackHandlers } from './handlers/callbackHandlers.js';

// –£—Ç–∏–ª–∏—Ç—ã
import { getMainMenuKeyboard } from './utils/keyboards.js';

// –¢–∏–ø—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
import { AVAILABLE_MODELS } from './types/bot.js';

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
import { createNonBlockingImageHandler } from './nonBlockingImageHandler.js';
import './health.js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
loadEnv();

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const envSchema = z.object({
  TELEGRAM_BOT_TOKEN: z.string().min(1, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env'),
  OPENROUTER_API_KEY: z.string().min(1, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å OPENROUTER_API_KEY –≤ —Ñ–∞–π–ª–µ .env'),
  OPENROUTER_MODEL: z.string().min(1).default('x-ai/grok-4-fast:free'),
  SYSTEM_PROMPT: z.string().min(1).default('–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ó–∞–ø—Ä–µ—â–µ–Ω–æ: —ç–º–æ–¥–∑–∏, ASCII-—Ä–∞–º–∫–∏/—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏, markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π. –î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Å—É—Ç—å.')
});

const parsedEnv = envSchema.safeParse(process.env);

if (!parsedEnv.success) {
  const flattened = parsedEnv.error.flatten();
  const fieldErrors = Object.entries(flattened.fieldErrors).flatMap(([field, errors]) =>
    (errors ?? []).map((error) => `${field}: ${error}`)
  );
  const messages = [...flattened.formErrors, ...fieldErrors];
  console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n', messages.join('\n'));
  process.exit(1);
}

const ENV = parsedEnv.data;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
 */
export class TelegramBot {
  private bot: Telegraf;
  
  // –°–µ—Ä–≤–∏—Å—ã
  private userService: UserService;
  private openRouterService: OpenRouterService;
  private messageService: MessageService;
  private telegramFileService: TelegramFileService;
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  private commandHandlers: CommandHandlers;
  private keyboardHandlers: KeyboardHandlers;
  private callbackHandlers: CallbackHandlers;

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  private userStates = new Map<number, string>();
  private userActiveRequests = new Map<number, boolean>();

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    this.userService = new UserService(ENV.OPENROUTER_MODEL, ENV.SYSTEM_PROMPT);
    this.openRouterService = new OpenRouterService(ENV.OPENROUTER_API_KEY);
    this.messageService = new MessageService();
    this.telegramFileService = new TelegramFileService();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    this.bot = new Telegraf(ENV.TELEGRAM_BOT_TOKEN, {
      telegram: {
        agent: undefined,
        attachmentAgent: undefined,
        testEnv: false
      },
      handlerTimeout: 180_000
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    this.commandHandlers = new CommandHandlers(
      this.userService,
      this.replyWithTracking.bind(this)
    );

    this.keyboardHandlers = new KeyboardHandlers(
      this.userService,
      this.replyWithTracking.bind(this),
      this.clearAllChatMessages.bind(this),
      this.sendHelpMessage.bind(this)
    );

    this.callbackHandlers = new CallbackHandlers(
      this.userService,
      this.messageService,
      this.replyWithTracking.bind(this),
      this.clearAllChatMessages.bind(this),
      ENV.SYSTEM_PROMPT,
      this.setUserState.bind(this),
      this.clearUserState.bind(this)
    );

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    this.setupMiddleware();
    this.setupHandlers();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
   */
  private setupMiddleware(): void {
    // Middleware –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
    const ensurePrivateChat: MiddlewareFn<Context> = async (ctx, next) => {
      if (ctx.chat?.type !== 'private') {
        await this.replyWithTracking(ctx, '‚ö†Ô∏è –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö.');
        return;
      }
      return next();
    };

    this.bot.use(ensurePrivateChat);

    // Rate limiting middleware –¥–ª—è –∫–æ–º–∞–Ω–¥
    this.bot.command(/(start|help|settings|reset|debug|stats|admin)/, 
      rateLimitService.createMiddleware('command')
    );

    // Rate limiting middleware –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', rateLimitService.createMiddleware('text_message'));

    // Rate limiting middleware –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    this.bot.on('photo', rateLimitService.createMiddleware('image_processing'));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  private setupHandlers(): void {
    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.start(this.commandHandlers.handleStart.bind(this.commandHandlers));
    this.bot.command('reset', this.commandHandlers.handleReset.bind(this.commandHandlers));
    this.bot.command('settings', this.commandHandlers.handleSettings.bind(this.commandHandlers));
    this.bot.command('help', this.commandHandlers.handleHelp.bind(this.commandHandlers));
    this.bot.command('debug', this.commandHandlers.handleDebug.bind(this.commandHandlers));
    this.bot.command('stats', this.commandHandlers.handleStats.bind(this.commandHandlers));
    this.bot.command('admin', this.commandHandlers.handleAdmin.bind(this.commandHandlers));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    this.bot.hears(['üí¨ –ù–æ–≤—ã–π —á–∞—Ç', 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', '‚ÑπÔ∏è –ü–æ–º–æ—â—å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'], 
      this.keyboardHandlers.handleKeyboardButton.bind(this.keyboardHandlers)
    );

    // Callback –∫–Ω–æ–ø–∫–∏ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    this.setupCallbackHandlers();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', this.handleTextMessage.bind(this));
    this.bot.on('photo', this.setupImageHandler());
    this.bot.on(['document', 'video', 'audio', 'voice', 'sticker'], this.handleUnsupportedMedia.bind(this));

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch(this.handleError.bind(this));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
   */
  private setupCallbackHandlers(): void {
    // Welcome callbacks
    this.bot.action('welcome:start', async (ctx) => {
      await ctx.answerCbQuery('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!');
      await ctx.editMessageText('üöÄ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É.');
    });

    this.bot.action('welcome:help', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageText(
        '‚ùì *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç*\n\n' +
          '1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—å–±—É.\n' +
          '2. –Ø –æ–±—Ä–∞—â–∞—é—Å—å –∫ –º–æ–¥–µ–ª–∏ OpenRouter.\n' +
          '3. –í–æ–∑–≤—Ä–∞—â–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.',
        { parse_mode: 'Markdown' }
      );
    });

    this.bot.action('welcome:settings', async (ctx) => {
      await ctx.answerCbQuery();
      if (!ctx.from) return;
      
      const { getSettingsButtons } = await import('./utils/keyboards.js');
      await ctx.editMessageText('‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...', getSettingsButtons(ctx.from.id));
    });

    // Settings callbacks
    this.bot.action(/settings:model:(\d+)/, this.callbackHandlers.handleSettingsModel.bind(this.callbackHandlers));
    this.bot.action(/settings:selectmodel:(\d+):(.+)/, this.callbackHandlers.handleSelectModel.bind(this.callbackHandlers));
    this.bot.action(/settings:prompt:(\d+)/, this.callbackHandlers.handleSettingsPrompt.bind(this.callbackHandlers));
    this.bot.action(/settings:editprompt:(\d+)/, this.callbackHandlers.handleEditPrompt.bind(this.callbackHandlers));
    this.bot.action(/settings:resetprompt:(\d+)/, this.callbackHandlers.handleResetPrompt.bind(this.callbackHandlers));
    this.bot.action(/settings:canceledit:(\d+)/, this.callbackHandlers.handleCancelEdit.bind(this.callbackHandlers));
    this.bot.action(/settings:back:(\d+)/, this.callbackHandlers.handleSettingsBack.bind(this.callbackHandlers));
    this.bot.action(/settings:close:(\d+)/, this.callbackHandlers.handleSettingsClose.bind(this.callbackHandlers));
    this.bot.action(/settings:stats:(\d+)/, this.callbackHandlers.handleUserStatsFromSettings.bind(this.callbackHandlers));

    // Reset callbacks
    this.bot.action(/reset:confirm:(\d+)/, this.callbackHandlers.handleResetConfirm.bind(this.callbackHandlers));
    this.bot.action(/reset:cancel:(\d+)/, this.callbackHandlers.handleResetCancel.bind(this.callbackHandlers));

    // Admin callbacks
    this.bot.action(/admin:stats:(\d+)/, async (ctx) => {
      if (this.commandHandlers.isAdmin(ctx.from!.id)) {
        await this.commandHandlers.handleBotStats(ctx as any);
      }
    });

    // Pagination callbacks
    this.bot.action(/page:(prev|next):(\-?\d+):(\d+)/, async (ctx) => {
      const direction = ctx.match[1] as 'prev' | 'next';
      await this.callbackHandlers.handlePagination(ctx, direction);
    });

    // Noop callback
    this.bot.action(/noop:(\d+)/, this.callbackHandlers.handleNoop.bind(this.callbackHandlers));
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private setupImageHandler() {
    return createNonBlockingImageHandler({
      doesUserModelSupportImages: (userId) => this.doesUserModelSupportImages(userId),
      AVAILABLE_MODELS,
      getUserModel: (userId) => this.userService.getUserModel(userId),
      replyWithTracking: this.replyWithTracking.bind(this),
      trackUserMessage: (userId, messageId) => this.userService.trackUserMessage(userId, messageId),
      isUserRequestActive: (userId) => this.userActiveRequests.has(userId),
      checkUserRateLimit: (userId) => rateLimitService.checkLimit(userId, 'image_processing').allowed,
      USER_RATE_LIMIT_MS: 2000,
      userLastRequest: new Map(),
      tgFileToDataUrl: (ctx, fileId) => this.telegramFileService.tgFileToDataUrl(ctx, fileId),
      callOpenRouter: (messages, userId) => {
        const userModel = this.userService.getUserModel(userId);
        return this.openRouterService.callOpenRouter(messages, userId, userModel);
      },
      buildHistory: (userId) => this.userService.buildHistory(userId),
      getUserSystemPrompt: (userId) => this.userService.getUserSystemPrompt(userId),
      appendToHistory: (userId, message) => this.userService.appendToHistory(userId, message),
      sendAnswer: (ctx, answer, statusMessage) => this.messageService.sendAnswer(ctx, answer, statusMessage, getMainMenuKeyboard, this.replyWithTracking.bind(this)),
      getMainMenuKeyboard,
      userActiveRequests: this.userActiveRequests
    });
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
   */
  private async replyWithTracking(ctx: Context, text: string, extra?: any): Promise<any> {
    const message = await ctx.reply(text, extra);
    if (ctx.from) {
      this.userService.trackBotMessage(ctx.from.id, message.message_id);
    }
    return message;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–æ–¥–µ–ª—å—é
   */
  private doesUserModelSupportImages(userId: number): boolean {
    const userModel = this.userService.getUserModel(userId);
    const model = AVAILABLE_MODELS.find(m => m.id === userModel);
    return model?.supportsImages ?? false;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleTextMessage(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    const text = (ctx.message as any)?.text?.trim();
    
    if (!text) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º–ø—Ç–∞
    const userState = this.userStates.get(userId);
    
    if (userState === 'awaiting_prompt') {
      const success = await this.callbackHandlers.handlePromptInput(ctx, userId, text);
      if (success) {
        this.userStates.delete(userId);
      }
      return;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await this.processTextMessage(ctx, userId, text);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async processTextMessage(ctx: Context, userId: number, text: string): Promise<void> {
    let emergencyUnlock: NodeJS.Timeout | undefined;

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ï–ö–¶–ò–Ø: –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const isActive = this.userActiveRequests.has(userId);
    const isProcessingImage = this.isProcessingImageForUser(userId);
    
    if (isActive || isProcessingImage) {
      console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} - –∞–∫—Ç–∏–≤–µ–Ω –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å`);
      
      // –£–¥–∞–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.telegram.deleteMessage(ctx.chat!.id, ctx.message!.message_id);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${(error as Error).message}`);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
      const warningMessage = await this.replyWithTracking(ctx, 
        `‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.`,
        { reply_markup: getMainMenuKeyboard().reply_markup }
      );
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —Å–µ–∫—É–Ω–¥
      setTimeout(async () => {
        try {
          await ctx.telegram.deleteMessage(ctx.chat!.id, warningMessage.message_id);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        }
      }, 12000);
      
      return;
    }

    // –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –î–û –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π  
    this.userActiveRequests.set(userId, true);

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
    emergencyUnlock = setTimeout(() => {
      console.warn(`‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (—Ç–∞–π–º–∞—É—Ç 3 –º–∏–Ω)`);
      this.userActiveRequests.delete(userId);
    }, 180_000);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
    this.userService.trackUserMessage(userId, ctx.message!.message_id);

    const statusMessage = await this.replyWithTracking(ctx, '‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...', {
      reply_markup: getMainMenuKeyboard().reply_markup
    }) as any;

    let requestCompleted = false;
    
    const longWaitTimer = setTimeout(() => {
      if (!requestCompleted) {
        void this.messageService.safeEditMessage(
          ctx,
          statusMessage.chat.id,
          statusMessage.message_id,
          '‚è≥ –ó–∞–ø—Ä–æ—Å –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—ã—á–Ω–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ...'
        );
      }
    }, 15_000);

    try {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.userService.appendToHistory(userId, { role: 'user', content: text });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
      const history = this.userService.buildHistory(userId);
      const messages = [
        { role: 'system', content: this.userService.getUserSystemPrompt(userId) },
        ...history
      ];
      
      // –í—ã–∑—ã–≤–∞–µ–º OpenRouter
      const userModel = this.userService.getUserModel(userId);
      const assistantReply = await this.openRouterService.callOpenRouter(messages, userId, userModel);
      
      requestCompleted = true;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.userService.appendToHistory(userId, { role: 'assistant', content: assistantReply });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      await this.messageService.sendAnswer(ctx, assistantReply, statusMessage, getMainMenuKeyboard, this.replyWithTracking.bind(this));
      
    } catch (error) {
      requestCompleted = true;
      const message = error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞';
      const friendlyMessage = this.getFriendlyErrorMessage(message);
      
      const edited = await this.messageService.safeEditMessage(
        ctx, 
        statusMessage.chat.id, 
        statusMessage.message_id, 
        friendlyMessage
      );
      
      if (!edited) {
        await this.replyWithTracking(ctx, friendlyMessage, {
          reply_markup: getMainMenuKeyboard().reply_markup
        });
      }
    } finally {
      // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–Ω–∏–º–∞–µ–º –ø–æ–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
      this.userActiveRequests.delete(userId);
      clearTimeout(longWaitTimer);
      if (emergencyUnlock) clearTimeout(emergencyUnlock);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  private getFriendlyErrorMessage(message: string): string {
    if (/401/.test(message)) {
      return '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ OpenRouter. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –¥–æ—Å—Ç—É–ø—ã.';
    }
    if (/403/.test(message) || message.includes('not available in your region')) {
      return 'üîß –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ.';
    }
    return `‚ùå –û—à–∏–±–∫–∞: ${message}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private isProcessingImageForUser(userId: number): boolean {
    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å imageProcessor –∫–æ–≥–¥–∞ –æ–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    try {
      const { imageProcessor } = require('./imageProcessor.js');
      return imageProcessor.isProcessingForUser(userId);
    } catch {
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
   */
  private async handleUnsupportedMedia(ctx: Context): Promise<void> {
    const userId = ctx.from!.id;
    
    this.userService.trackUserMessage(userId, ctx.message!.message_id);
    
    try {
      await ctx.deleteMessage();
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º:', (error as Error).message);
    }
    
    await this.replyWithTracking(ctx, 
      '‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Grok 4 Fast) –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
      { reply_markup: getMainMenuKeyboard().reply_markup }
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
   */
  private handleError(error: any, ctx?: Context): void {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:', error);
    if (ctx && ctx.chat) {
      ctx.reply('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.')
        .catch(() => console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'));
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
   */
  private async clearAllChatMessages(ctx: Context, userId: number, excludeMessageIds: number[] = []): Promise<void> {
    const chatId = ctx.chat?.id ?? (ctx as any).callbackQuery?.message?.chat.id ?? userId;
    
    console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    const allMessages = this.userService.getUserAllMessages(userId);
    const messagesToDelete = Array.from(allMessages).filter(id => !excludeMessageIds.includes(id));
    
    if (messagesToDelete.length > 0) {
      console.log(`üìù –ù–∞–π–¥–µ–Ω–æ ${messagesToDelete.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–µ–Ω–æ: ${excludeMessageIds.length})`);
      
      // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ
      const deletePromises = messagesToDelete.map(async (messageId) => {
        try {
          await ctx.telegram.deleteMessage(chatId, messageId);
          return { success: true, messageId };
        } catch (error) {
          const errorMsg = (error as Error).message;
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (48+ —á–∞—Å–æ–≤)
          if (!errorMsg.includes('message to delete not found') && !errorMsg.includes('message can\'t be deleted')) {
            console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageId}: ${errorMsg}`);
          }
          return { success: false, messageId };
        }
      });

      // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const results = await Promise.allSettled(deletePromises);
      const deletedCount = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
      const errorCount = results.filter(r => r.status === 'rejected' || (r.status === 'fulfilled' && !r.value.success)).length;
      
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—à–∏–±–æ–∫: ${errorCount}`);
    } else {
      console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: ${allMessages.size})`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    try {
      const removeKeyboardMsg = await ctx.telegram.sendMessage(chatId, 'üßπ', {
        reply_markup: { remove_keyboard: true }
      });
      // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.telegram.deleteMessage(chatId, removeKeyboardMsg.message_id);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ tracking –∫–∞—Ä—Ç—ã
    this.userService.clearUserMessages(userId);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    this.messageService.clearChatPaginationStates(chatId);
    
    console.log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async sendHelpMessage(ctx: Context): Promise<void> {
    const helpText = [
      '‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞*',
      '',
      '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ù–æ–≤—ã–π —á–∞—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–µ–∂–∏–π –¥–∏–∞–ª–æ–≥.',
      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é¬ª, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.',
      '‚Ä¢ –í ¬´‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª –º–æ–∂–Ω–æ:',
      '  - üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å AI (Grok 4 Fast, DeepSeek Chat)',
      '  - üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
      '',
      'üì∏ *–†–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:*',
      '‚Ä¢ Grok 4 Fast –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
      '‚Ä¢ DeepSeek Chat —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º',
      '‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
      '',
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî –∏ —è –æ—Ç–≤–µ—á—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!'
    ].join('\n');

    await this.replyWithTracking(ctx, helpText, {
      parse_mode: 'Markdown',
      reply_markup: getMainMenuKeyboard().reply_markup
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
   */
  setUserState(userId: number, state: string): void {
    this.userStates.set(userId, state);
  }

  /**
   * –£–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  clearUserState(userId: number): void {
    this.userStates.delete(userId);
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  public async launch(): Promise<void> {
    try {
      await this.bot.launch();
      console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –≤–µ—Ä—Å–∏—è)');
      console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üì° Railway: ${process.env.RAILWAY_ENVIRONMENT ? 'YES' : 'NO'}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
      process.exit(1);
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
   */
  public async stop(signal?: string): Promise<void> {
    console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal || 'STOP'}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...`);
    await this.bot.stop(signal);
    console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// Graceful shutdown
const gracefulShutdown = async (signal: string) => {
  console.log(`üõë –ü–æ–ª—É—á–µ–Ω ${signal}, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...`);
  process.exit(0);
};

process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));
